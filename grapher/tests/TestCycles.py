import sys
import os
myPath = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, myPath + '/../')
from Graph import Graph
from Nodes import Node
from Nodes import FactNode, ConceptNode, MisconNode, ScaseNode
from Cycles import Cycles


class TestCycles:
    def test_single_cycle(self):
        graph = Graph()
        nodeA = FactNode(ID="A", content="node")
        nodeB = ConceptNode(ID="B", content="node")
        nodeC = FactNode(ID="C", content="node")
        nodeA.add_successor(nodeB)
        nodeB.add_successor(nodeC)
        nodeC.add_successor(nodeA)
        graph.add_node(nodeA)
        graph.add_node(nodeB)
        graph.add_node(nodeC)
        assert Cycles().find_cycle(graph) == [('C', 'B', 'A')]

    def test_no_cycles(self):
        graph = Graph()
        nodeA = FactNode(ID="A", content="nodeA")
        nodeB = MisconNode(ID="B", content="nodeB")
        nodeC = FactNode(ID="C", content="nodeC")
        nodeA.add_successor(nodeB)
        nodeA.add_successor(nodeC)
        nodeB.add_successor(nodeC)
        graph.add_node(nodeA)
        graph.add_node(nodeB)
        graph.add_node(nodeC)
        for thing in graph.nodeDict:
            print thing
        assert Cycles().find_cycle(graph) == []

    def test_two_cycles(self):
        graph = Graph()
        nodeA = Node(ID="A", content="node")
        nodeB = Node(ID="B", content="node")
        nodeC = Node(ID="C", content="node")
        nodeD = Node(ID="D", content="node")
        nodeE = Node(ID="E", content="node")
        nodeF = Node(ID="F", content="node")
        nodeA.add_successor(nodeB)
        nodeB.add_successor(nodeC)
        nodeC.add_successor(nodeA)
        nodeD.add_successor(nodeE)
        nodeE.add_successor(nodeF)
        nodeF.add_successor(nodeD)
        graph.add_node(nodeA)
        graph.add_node(nodeB)
        graph.add_node(nodeC)
        graph.add_node(nodeD)
        graph.add_node(nodeE)
        graph.add_node(nodeF)
        assert Cycles().find_cycle(graph) == [('C', 'B', 'A'), ('D', 'F', 'E')]

    def test_medium_graph(self):
        graph = Graph()
        nodeA = Node(ID="A", content="node")
        nodeB = Node(ID="B", content="node")
        nodeC = Node(ID="C", content="node")
        nodeD = Node(ID="D", content="node")
        nodeE = Node(ID="E", content="node")
        nodeF = Node(ID="F", content="node")
        nodeA.add_successor(nodeB)
        nodeB.add_successor(nodeC)
        nodeB.add_successor(nodeD)
        nodeC.add_successor(nodeA)
        nodeC.add_successor(nodeE)
        nodeF.add_successor(nodeB)
        graph.add_node(nodeA)
        graph.add_node(nodeB)
        graph.add_node(nodeC)
        graph.add_node(nodeD)
        graph.add_node(nodeE)
        graph.add_node(nodeF)
        assert Cycles().find_cycle(graph) == [('C', 'B', 'A')]

    def test_larger_graph(self):
        graph = Graph()
        nodeA = FactNode(ID="A", content="node")
        nodeB = ConceptNode(ID="B", content="node")
        nodeC = FactNode(ID="C", content="node")
        nodeD = FactNode(ID="D", content="node")
        nodeE = FactNode(ID="E", content="node")
        nodeF = FactNode(ID="F", content="node")
        nodeG = FactNode(ID="G", content="node")
        nodeH = FactNode(ID="H", content="node")
        nodeI = FactNode(ID="I", content="node")
        nodeA.add_successor(nodeB)
        nodeB.add_successor(nodeC)
        nodeC.add_successor(nodeA)
        nodeD.add_successor(nodeF)
        nodeE.add_successor(nodeD)
        nodeF.add_successor(nodeE)
        nodeG.add_successor(nodeH)
        nodeH.add_successor(nodeI)
        nodeI.add_successor(nodeG)
        nodeB.add_successor(nodeD)
        nodeC.add_successor(nodeD)
        nodeF.add_successor(nodeH)
        nodeE.add_successor(nodeH)
        nodeC.add_successor(nodeH)
        nodeC.add_successor(nodeG)
        graph.add_node(nodeA)
        graph.add_node(nodeB)
        graph.add_node(nodeC)
        graph.add_node(nodeD)
        graph.add_node(nodeE)
        graph.add_node(nodeF)
        graph.add_node(nodeG)
        graph.add_node(nodeH)
        graph.add_node(nodeI)
        assert Cycles().find_cycle(graph) == [('G', 'I', 'H'), ('E', 'F', 'D'), ('C', 'B', 'A')]

    def test_larger_cycle(self):
        graph = Graph()
        nodeA = FactNode(ID="A", content="node")
        nodeB = ConceptNode(ID="B", content="node")
        nodeC = FactNode(ID="C", content="node")
        nodeD = FactNode(ID="D", content="node")
        nodeE = FactNode(ID="E", content="node")
        nodeF = FactNode(ID="F", content="node")
        nodeG = FactNode(ID="G", content="node")
        nodeH = FactNode(ID="H", content="node")
        nodeI = FactNode(ID="I", content="node")
        nodeJ = FactNode(ID="J", content="node")
        nodeK = FactNode(ID="K", content="node")
        nodeL = FactNode(ID="L", content="node")
        nodeM = FactNode(ID="M", content="node")
        nodeN = FactNode(ID="N", content="node")
        nodeO = FactNode(ID="O", content="node")
        nodeP = FactNode(ID="P", content="node")
        nodeQ = FactNode(ID="Q", content="node")
        nodeR = FactNode(ID="R", content="node")
        nodeS = FactNode(ID="S", content="node")
        nodeT = FactNode(ID="T", content="node")
        nodeA.add_successor(nodeF)
        nodeB.add_successor(nodeC)
        nodeC.add_successor(nodeH)
        nodeD.add_successor(nodeC)
        nodeE.add_successor(nodeI)
        nodeF.add_successor(nodeK)
        nodeG.add_successor(nodeA)
        nodeH.add_successor(nodeG)
        nodeI.add_successor(nodeD)
        nodeJ.add_successor(nodeE)
        nodeK.add_successor(nodeP)
        nodeL.add_successor(nodeM)
        nodeM.add_successor(nodeH)
        nodeM.add_successor(nodeR)
        nodeN.add_successor(nodeJ)
        nodeN.add_successor(nodeT)
        nodeP.add_successor(nodeL)
        nodeR.add_successor(nodeN)
        nodeS.add_successor(nodeT)
        nodeT.add_successor(nodeO)
        graph.add_node(nodeA)
        graph.add_node(nodeB)
        graph.add_node(nodeC)
        graph.add_node(nodeD)
        graph.add_node(nodeE)
        graph.add_node(nodeF)
        graph.add_node(nodeG)
        graph.add_node(nodeH)
        graph.add_node(nodeI)
        graph.add_node(nodeJ)
        graph.add_node(nodeK)
        graph.add_node(nodeL)
        graph.add_node(nodeM)
        graph.add_node(nodeN)
        graph.add_node(nodeO)
        graph.add_node(nodeP)
        graph.add_node(nodeQ)
        graph.add_node(nodeR)
        graph.add_node(nodeS)
        graph.add_node(nodeT)
        assert Cycles().find_cycle(graph) == [('C', 'D', 'I', 'E', 'J', 'N', 'R', 'G', 'H', 'M', 'L', 'P', 'K', 'F', 'A')]

    # test_single_cycle()
    # test_two_cycles()
    # test_overlapping_cycles() #fails
    # test_no_cycles()
    # test_medium_graph()
    # test_larger_graph()
    # test_larger_cycle()
